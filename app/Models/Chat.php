<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Chat extends Model
{
    use HasFactory;

    protected $casts = [
        'blocked'   =>  'boolean'
    ];

    protected $hidden = [
        'created_at',
        'updated_at',
        'deleted_at',

        'member1',
        'member2',
        'product_id',
        'blocked',
        'blocker_id'
    ];

    protected static function boot()
    {
        static::created(function () {
            \DB::statement(
            "CREATE VIEW IF NOT EXISTS getLastMsgChat{$this->id} as
                (SELECT 'msg' as type,message, attachments as data,updated_at FROM chat_messages WHERE chat_id={$this->id} ORDER BY updated_at DESC LIMIT 1)
                UNION ALL (SELECT 'agr' as type,details as message,status as data,updated_at FROM chat_agreements WHERE chat_id={$this->id} ORDER BY updated_at DESC LIMIT 1)
                UNION ALL (SELECT 'cal' as type,status as message,cast(null as varchar (40)) as data,updated_at FROM chat_calls WHERE chat_id={$this->id} ORDER BY updated_at DESC LIMIT 1)"
            );
        });
        parent::boot(); // TODO: Change the autogenerated stub
    }

    public function user()
    {
        if ($this->member1 !== request()->user('api')->id)
            return $this->belongsTo(User::class,'member1');
        else
            return $this->belongsTo(User::class,'member2');
    }

    public function product()
    {
        return $this->belongsTo(Product::class);
    }
    public function blocker()
    {
        return $this->belongsTo(User::class, 'blocker_id');
    }

    public function isBlocked()
    {
        $this->block = (object)['isBlocked'=>$this->blocked,'canUnBlock'=>$this->blocker_id===request()->user('api')->id];
        return $this;
    }

    public function lastMsg()
    {
        $this->lastMsg = (object)\DB::select("SELECT * FROM getLastMsgChat{$this->id} ORDER BY updated_at DESC LIMIT 1")[0];
        return $this;
    }
    public function messages()
    {
        return $this->hasMany(ChatMessage::class);
    }
    public function agreements()
    {
        return $this->hasMany(ChatAgreement::class);
    }
    public function calls()
    {
        return $this->hasMany(ChatCall::class);
    }
    public function reports()
    {
        return $this->hasMany(ChatReport::class);
    }
    public function logs()
    {
        return $this->hasMany(ChatLog::class);
    }
}
